//
//  Message.swift
//  openai-kit
//
//  Created by Mark DiFranco on 2025-02-10.
//

import Foundation

public struct Message: Codable {
    public let id: String
    public let threadId: String
    public let assistantId: String?
    public let runId: String?
    public let status: Status?
    public let incompleteDetails: IncompleteDetails?
    public let role: Role
    public let content: [Content]
    public let metadata: [String : String]
}

public extension Message {
    enum Status: String, Codable {
        case inProgress
        case incomplete
        case completed
    }

    enum Role: String, Codable {
        case user
        case assistant
    }

    struct IncompleteDetails: Codable {
        public let reason: String
    }

    enum Content: Codable {
        /// Text content.
        case text(String)
        /// A URL to an image.
        case imageURL(URL, ImageDetail)
        /// A file ID for an image.
        case imageFile(String, ImageDetail)
        /// The refusal content generated by the assistant.
        case refusal(String)
    }

    enum ImageDetail: String, Codable {
        case low
        case high
        case auto
    }
}

extension Message.Content {
    public var text: String? {
        switch self {
        case .text(let text):
            return text
        default:
            return nil
        }
    }
    public var imageURL: URL? {
        switch self {
        case .imageURL(let url, _):
            return url
        default:
            return nil
        }
    }
    public var imageFileID: String? {
        switch self {
        case .imageFile(let fileID, _):
            return fileID
        default:
            return nil
        }
    }
}

extension Message {
    private enum CodingKeys: String, CodingKey {
        case id
        case threadId
        case assistantId
        case runId
        case status
        case incompleteDetails
        case role
        case content
        case metadata
    }

    private enum ContentKeys: String, CodingKey {
        case type
        case text
        case imageURL
        case imageFile
        case refusal
    }

    private enum TextContentKeys: String, CodingKey {
        case value
    }

    private enum ImageURLKeys: String, CodingKey {
        case url
        case detail
    }

    private enum ImageFileKeys: String, CodingKey {
        case fileId
        case detail
    }

    public init(from decoder: any Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        id = try container.decode(String.self, forKey: .id)
        threadId = try container.decode(String.self, forKey: .threadId)
        assistantId = try container.decodeIfPresent(String.self, forKey: .assistantId)
        runId = try container.decodeIfPresent(String.self, forKey: .runId)
        status = try container.decode(Message.Status.self, forKey: .status)
        incompleteDetails = try container.decodeIfPresent(IncompleteDetails.self, forKey: .incompleteDetails)
        role = try container.decode(Message.Role.self, forKey: .role)
        metadata = try container.decode([String : String].self, forKey: .metadata)

        // Content
        var contentsArray = try container.nestedUnkeyedContainer(forKey: .content)
        var contents = [Content]()

        while !contentsArray.isAtEnd {
            let contentContainer = try contentsArray.nestedContainer(keyedBy: ContentKeys.self)
            let type = try contentContainer.decode(String.self, forKey: .type)

            switch type {
            case "text":
                let textContainer = try contentContainer.nestedContainer(keyedBy: TextContentKeys.self, forKey: .text)
                let text = try textContainer.decode(String.self, forKey: .value)
                contents.append(.text(text))
            case "image_url":
                let imageURLContainer = try contentContainer.nestedContainer(keyedBy: ImageURLKeys.self, forKey: .imageURL)

                if let url = try? imageURLContainer.decode(URL.self, forKey: .url) {
                    let detail = try imageURLContainer.decodeIfPresent(ImageDetail.self, forKey: .detail) ?? .auto

                    contents.append(.imageURL(url, detail))
                } else {
                    throw DecodingError.dataCorruptedError(forKey: .type, in: contentContainer, debugDescription: "Unknown image URL")
                }
            case "image_file":
                let imageFileContainer = try contentContainer.nestedContainer(keyedBy: ImageFileKeys.self, forKey: .imageFile)

                if let fileID = try? imageFileContainer.decode(String.self, forKey: .fileId) {
                    let detail = try imageFileContainer.decodeIfPresent(ImageDetail.self, forKey: .detail) ?? .auto

                    contents.append(.imageFile(fileID, detail))
                } else {
                    throw DecodingError.dataCorruptedError(forKey: .type, in: contentContainer, debugDescription: "Unknown image file ID")
                }
            case "refusal":
                let refusal = try contentContainer.decode(String.self, forKey: .refusal)
                contents.append(.refusal(refusal))
            default:
                throw DecodingError.dataCorruptedError(forKey: .type, in: contentContainer, debugDescription: "Unknown content type: \(type)")
            }
        }

        content = contents
    }

    public func encode(to encoder: any Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(id, forKey: .id)
        try container.encode(threadId, forKey: .threadId)
        try container.encodeIfPresent(assistantId, forKey: .assistantId)
        try container.encodeIfPresent(runId, forKey: .runId)
        try container.encode(status, forKey: .status)
        try container.encodeIfPresent(incompleteDetails, forKey: .incompleteDetails)
        try container.encode(role, forKey: .role)
        try container.encode(metadata, forKey: .metadata)

        if content.count == 1, let text = content.first?.text {
            try container.encode(text, forKey: .content)
        } else {
            var contentsArray = container.nestedUnkeyedContainer(forKey: .content)
            for contentItem in content {
                var contentContainer = contentsArray.nestedContainer(keyedBy: ContentKeys.self)
                switch contentItem {
                case .text(let text):
                    var textContentContainer = contentContainer.nestedContainer(keyedBy: TextContentKeys.self, forKey: .text)
                    try textContentContainer.encode(text, forKey: .value)
                case .imageURL(let url, let detail):
                    try contentContainer.encode("image_url", forKey: .type)
                    var urlContainer = contentContainer.nestedContainer(keyedBy: ImageURLKeys.self, forKey: .imageURL)
                    try urlContainer.encode(url, forKey: .url)
                    try urlContainer.encode(detail, forKey: .detail)
                case .imageFile(let fileID, let detail):
                    try contentContainer.encode("image_file", forKey: .type)
                    var imageFileContainer = contentContainer.nestedContainer(keyedBy: ImageFileKeys.self, forKey: .imageFile)
                    try imageFileContainer.encode(fileID, forKey: .fileId)
                    try imageFileContainer.encode(detail, forKey: .detail)
                case .refusal(let refusal):
                    try contentContainer.encode("refusal", forKey: .type)
                    try contentContainer.encode(refusal, forKey: .refusal)
                }
            }
        }
    }
}
